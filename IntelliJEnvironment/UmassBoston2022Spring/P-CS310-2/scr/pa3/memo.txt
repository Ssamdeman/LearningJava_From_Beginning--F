
User Notes: I was late for two days after my extion of two days.
    So the petalty should be only 10% of total grade.
    I could not finished the whole hw like 2 which I am still working on it.
    I try to finsh my problem 2 as soon as i can.


1. What is the runtime of the Dynamic subsequence algorithm?
    The run time will be
    6(1) + n + n*n. Since we care about 0(n) we see that we have n^2 as upper bound.
     So the run time is the 0(n^2)
2. What are the possible four maximum subsequences to the sequence above?
    0 4 6 9 13 15
    0 4 6 9 11 15
    0 2 6 9 13 15
    0 2 6 9 11 15
3. What is the output from matching the two sequences:
    x = ”AACAGTTACC” and y = ”TAAGGTCA”?
4. What is the runtime of the matching DP algorithm?
5. What is the space required to implement the algorithm?

6. Analyze the runtime and space usage of your Move to front algorithm
    First analysis will be the encode section.
        we have this 4(1) + n + n +n + n. Since we are focusing on the time complexisty
        with as upper bound we see that our encode will be about 0(n).
        Now we will solve for the space usage.
           We know that MTF does not compress the data but creates, depending the input,
            some repition that can be used to be compresession. You can say this MTF prepares for
            compression. The space is smaller then from 16 bits. Since we are using char and not int.
            so we have 8 bits. So the runtime will be on 0(n) since we have input as size of n.
            8 bit of O(n)
    Now we can jump into the deconding section.
        talking about runtime analysis we see that
         5(1) +n+n+n+n. ince we are focusing on the time complexisty
         with as upper bound we see that our decode will be about 0(n).
         Focusing on the space usage is that we need to use more space on decoding.
            Again we MTF does not do any kind go compression, but we take c bits
            as integer to find the postion. integer represenets with 16 bits in binaryIn.
            thus we get 16 bits of O(n) as space usage.

        We say that decode take more space then encode but runs on the same O(n).

